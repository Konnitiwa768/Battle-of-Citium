<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <title>Poopクリッカー with 転生ボーナス＆単位表記</title>
  <style>
    body {
      font-family: sans-serif;
      background-color: #f9e7c7;
      color: #3e2f1c;
      text-align: center;
      transition: background 0.5s;
    }
    #poopImage {
      width: 220px;
      cursor: pointer;
      margin: 20px;
      border-radius: 50%;
      box-shadow: 0 0 20px rgba(80,60,30,0.3);
    }
    .section {
      max-width: 600px;
      margin: auto;
    }
    .shop-item, .upgrade-item, .click-upgrade-item {
      margin: 10px;
      padding: 10px;
      background: #fffbe0;
      border: 1px solid #99845f;
      border-radius: 8px;
      display: flex;
      align-items: center;
    }
    .shop-item img, .upgrade-item img, .click-upgrade-item img {
      width: 64px;
      height: 64px;
      margin-right: 10px;
      border-radius: 8px;
      object-fit: cover;
      border: 1px solid #a07f3e;
    }
    button {
      margin-top: 5px;
    }
    .fever {
      animation: feverFlash 0.5s infinite alternate;
    }
    @keyframes feverFlash {
      from { background-color: #ffcc00; }
      to { background-color: #ffe066; }
    }
    #rebirthSection {
      margin-top: 30px;
      background: #fffbe0;
      border: 2px solid #99845f;
      padding: 10px;
      border-radius: 8px;
      max-width: 600px;
      margin-left: auto;
      margin-right: auto;
    }
  </style>
</head>
<body>
  <h1>💩 Poop クリッカー 💩</h1>
  <p>Poop: <span id="poop">0</span></p>
  <img id="poopImage" src="export1750063812443.png" alt="Poop" />
  <p><button onclick="resetGame()">🔁 リセット</button></p>

  <div class="section">
    <h2>施設ショップ</h2>
    <div id="shop"></div>
  </div>

  <div class="section">
    <h2>ミルクアップグレード</h2>
    <div id="upgrades"></div>
  </div>

  <div class="section">
    <h2>クリックアップグレード</h2>
    <div id="clickUpgrades"></div>
  </div>

  <!-- 転生ボーナスセクション -->
  <div id="rebirthSection">
    <h2>転生ボーナス</h2>
    <p>転生回数: <span id="rebirthCount">0</span></p>
    <p>転生倍率: <span id="rebirthMultiplier">1</span> 倍</p>
    <button onclick="rebirth()">🔄 転生する（Poopが100万以上で可能）</button>
    <p><small>転生するとPoopはリセットされますが、永久にクリック力と施設の生産力が上昇します。</small></p>
  </div>

  <audio id="clickSE" src="https://cdn.pixabay.com/audio/2022/03/15/audio_676d8b6c4f.mp3" preload="auto"></audio>
  <audio id="feverSE" src="https://cdn.pixabay.com/audio/2022/03/04/audio_9cf69cc69e.mp3" preload="auto"></audio>

<script>
  // ---------- 基本ステート ----------
  let poop = 0;
  let clickPower = 1;
  let milkLevel = 0;
  let clickUpgradeLevel = 0;
  let feverMode = false;
  let feverTimeout;
  let rebirthCount = 0;
  let rebirthMultiplier = 1;

  // ---------- 単位表記リスト (無限に拡張可能) ----------
  const units = [
    "", "K", "M", "B", "T",
    "Qa", "Qi", "Sx", "Sp", "Oc",
    "No", "De", "Ud", "Dd", "Td",
    "Qa2", "Qi2", "Sx2", "Sp2", "Oc2",
    // 必要ならどんどん続けてください
  ];

  function formatNumber(num) {
    if (num < 1000) return Math.floor(num).toString();
    let tier = Math.floor(Math.log10(num) / 3);
    if (tier >= units.length) tier = units.length -1;
    let scale = Math.pow(10, tier * 3);
    let scaled = num / scale;
    return scaled.toFixed(2) + units[tier];
  }

  // ---------- ミルクデータ ----------
  const milkData = [
    { name: "なし", multiplier: 1, cost: 0, color: "#f9e7c7", image: "export1750063812443.png" },
    { name: "低脂肪ミルク", multiplier: 1.5, cost: 1000, color: "#e1f0e5", image: "export1750063812443.png" },
    { name: "普通ミルク", multiplier: 3, cost: 7e6, color: "#d9f1ff", image: "export1750063812443.png" },
    { name: "濃厚ミルク", multiplier: 6, cost: 140e12, color: "#fff5d6", image: "export1750063812443.png" },
    { name: "金のミルク", multiplier: 10, cost: 136e15, color: "#fff8b2", image: "milk4.png" }
  ];

  // ---------- クリックアップグレード ----------
  const clickUpgrades = [
    { power: 5, cost: 4000, image: "click1.png" },
    { power: 4500, cost: 3.5e6, image: "click2.png" },
    { power: 80e7, cost: 25e10, image: "click3.png" },
    { power: 90e15, cost: 135e16, image: "click4.png" },
    { power: 10e18, cost: 21.5e21, image: "click5.png" }
  ];

  // ---------- 施設データ ----------
  const facilities = [
    { name: "トイレットペーパー工場", baseCost: 15, basePower: 0.1, count: 0, image: "factory.png" },
    { name: "汚れた靴屋", baseCost: 100, basePower: 1, count: 0, image: "shoe.png" },
    { name: "下痢製造機", baseCost: 1100, basePower: 8, count: 0, image: "machine.png" },
    { name: "トイレ神殿", baseCost: 12000, basePower: 47, count: 0, image: "temple.png" }
    // 省略せず追加してください
  ];

  // ---------- DOM要素 ----------
  const poopEl = document.getElementById("poop");
  const shopEl = document.getElementById("shop");
  const upgradesEl = document.getElementById("upgrades");
  const clickUpgradesEl = document.getElementById("clickUpgrades");
  const poopImage = document.getElementById("poopImage");
  const clickSE = document.getElementById("clickSE");
  const feverSE = document.getElementById("feverSE");
  const rebirthCountEl = document.getElementById("rebirthCount");
  const rebirthMultiplierEl = document.getElementById("rebirthMultiplier");

  // ---------- クリック処理 ----------
  poopImage.onclick = () => {
    if (!feverMode && Math.random() < 0.0016) {
      activateFever();
    }
    poop += clickPower * milkData[milkLevel].multiplier * rebirthMultiplier * (feverMode ? 7 : 1);
    clickSE.currentTime = 0;
    clickSE.play();
    updateDisplay();
  };

  // ---------- フィーバーモード ----------
  function activateFever() {
    feverMode = true;
    feverSE.play();
    document.body.classList.add("fever");
    clearTimeout(feverTimeout);
    feverTimeout = setTimeout(() => {
      feverMode = false;
      document.body.classList.remove("fever");
      updateDisplay();
    }, 5 * 60 * 1000);
  }

  // ---------- 施設購入 ----------
  function buyFacility(index) {
    const f = facilities[index];
    const cost = Math.floor(f.baseCost * Math.pow(1.15, f.count));
    if (poop >= cost) {
      poop -= cost;
      f.count++;
      updateDisplay();
    }
  }

  // ---------- ミルク購入 ----------
  function buyMilk(level) {
    const data = milkData[level];
    if (milkLevel === level - 1 && poop >= data.cost) {
      poop -= data.cost;
      milkLevel = level;
      updateDisplay();
    }
  }

  // ---------- クリックアップグレード購入 ----------
  function buyClickUpgrade() {
    const u = clickUpgrades[clickUpgradeLevel];
    if (u && poop >= u.cost) {
      poop -= u.cost;
      clickPower = u.power;
      clickUpgradeLevel++;
      updateDisplay();
    }
  }

  // ---------- 転生処理 ----------
  function rebirth() {
    if (poop < 1e6) {
      alert("Poopが100万以上必要です！");
      return;
    }
    if (!confirm("転生するとPoopがリセットされ、永久に生産力が上昇します。本当に転生しますか？")) return;

    rebirthCount++;
    rebirthMultiplier = 1 + rebirthCount * 0.2; // 転生ごとに20%上昇
    poop = 0;
    milkLevel = 0;
    clickPower = 1;
    clickUpgradeLevel = 0;
    facilities.forEach(f => f.count = 0);

    updateDisplay();
  }

  // ---------- 表示更新 ----------
  function updateDisplay() {
    poopEl.textContent = formatNumber(poop);
    document.body.style.backgroundColor = milkData[milkLevel].color;
    poopImage.src = milkData[milkLevel].image;

    rebirthCountEl.textContent = rebirthCount;
    rebirthMultiplierEl.textContent = rebirthMultiplier.toFixed(2);

    shopEl.innerHTML = "";
    facilities.forEach((f, i) => {
      const cost = Math.floor(f.baseCost * Math.pow(1.15, f.count));
      const el = document.createElement("div");
      el.className = "shop-item";
      el.innerHTML = `
        <img src="${f.image}" alt="${f.name}" />
        <div>
          <strong>${f.name}（${f.count}）</strong><br>
          生産: ${formatNumber(f.basePower)}/秒<br>
          価格: ${formatNumber(cost)} Poop<br>
          <button onclick="buyFacility(${i})">購入</button>
        </div>`;
      shopEl.appendChild(el);
    });

    upgradesEl.innerHTML = "";
    for (let i = 1; i < milkData.length; i++) {
      const data = milkData[i];
      const bought = milkLevel >= i;
      const el = document.createElement("div");
      el.className = "upgrade-item";
      el.innerHTML = `
        <img src="${data.image}" alt="${data.name}" />
        <div>
          <strong>${data.name}（倍率×${data.multiplier}）</strong><br>
          <button ${bought ? "disabled" : ""} onclick="buyMilk(${i})">
            ${bought ? "購入済み" : formatNumber(data.cost) + " Poopで購入"}
          </button>
        </div>`;
      upgradesEl.appendChild(el);
    }

    clickUpgradesEl.innerHTML = "";
    const cu = clickUpgrades[clickUpgradeLevel];
    if (cu) {
      const el = document.createElement("div");
      el.className = "click-upgrade-item";
      el.innerHTML = `
        <img src="${cu.image}" alt="クリック強化" />
        <div>
          クリック強化（→${formatNumber(cu.power)}）<br>
          <button onclick="buyClickUpgrade()">${formatNumber(cu.cost)} Poopで購入</button>
        </div>`;
      clickUpgradesEl.appendChild(el);
    }

    saveGame();
  }

  // ---------- 自動生産処理 ----------
  function producePoop() {
    let gain = 0;
    facilities.forEach(f => {
      gain += f.basePower * f.count;
    });
    gain *= milkData[milkLevel].multiplier * rebirthMultiplier * (feverMode ? 7 : 1) / 10;
    poop += gain;
    updateDisplay();
  }

  // ---------- セーブ ----------
  function saveGame() {
    const saveData = {
      poop,
      milkLevel,
      clickPower,
      clickUpgradeLevel,
      facilities: facilities.map(f => f.count),
      lastTime: Date.now(),
      rebirthCount,
      rebirthMultiplier
    };
    localStorage.setItem("poopClickerSave", JSON.stringify(saveData));
  }

  // ---------- ロード ----------
  function loadGame() {
    const data = localStorage.getItem("poopClickerSave");
    if (!data) return;
    const save = JSON.parse(data);
    poop = save.poop || 0;
    milkLevel = save.milkLevel || 0;
    clickPower = save.clickPower || 1;
    clickUpgradeLevel = save.clickUpgradeLevel || 0;
    save.facilities?.forEach((count, i) => {
      if (facilities[i]) facilities[i].count = count;
    });
    rebirthCount = save.rebirthCount || 0;
    rebirthMultiplier = save.rebirthMultiplier || 1;

    const lastTime = save.lastTime || Date.now();
    const diff = Math.floor((Date.now() - lastTime) / 1000);
    const offlineGain = diff * facilities.reduce((sum, f) => sum + f.basePower * f.count, 0) * milkData[milkLevel].multiplier * rebirthMultiplier;
    if (offlineGain > 0) {
      alert(`オフライン報酬: ${formatNumber(offlineGain)} Poop 獲得しました！`);
      poop += offlineGain;
    }
  }

  // ---------- リセット ----------
  function resetGame() {
    if (confirm("本当にリセットしますか？")) {
      poop = 0;
      milkLevel = 0;
      clickPower = 1;
      clickUpgradeLevel = 0;
      facilities.forEach(f => f.count = 0);
      rebirthCount = 0;
      rebirthMultiplier = 1;
      localStorage.removeItem("poopClickerSave");
      updateDisplay();
    }
  }

  loadGame();
  updateDisplay();
  setInterval(producePoop, 100);

</script>
</body>
</html>
